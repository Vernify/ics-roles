---
# Cleanup tasks for removed users

- name: Get list of current system users
  ansible.builtin.getent:
    database: passwd
  register: user_management_current_users

- name: Identify users to remove
  ansible.builtin.set_fact:
    user_management_users_to_remove: >-
      {{
        user_management_current_users.ansible_facts.getent_passwd.keys() | list |
        difference(user_management_users | map(attribute='name') | list) |
        difference(['root', 'daemon', 'bin', 'sys', 'sync', 'games', 'man', 'lp', 'mail', 'news', 'uucp', 'proxy', 'www-data', 'backup', 'list', 'irc', 'gnats', 'nobody', 'systemd-network', 'systemd-resolve', 'syslog', 'messagebus', 'uuidd', 'dnsmasq', 'landscape', 'pollinate', 'sshd', 'ansible'])
      }}

- name: Backup home directories of users to be removed
  community.general.archive:
    path: "{{ '/home/' + user_management_user_to_remove }}"
    dest: "/var/backups/user_{{ user_management_user_to_remove }}_{{ ansible_date_time.epoch }}.tar.gz"
    format: gz
    mode: '0600'
  become: true
  loop: "{{ user_management_users_to_remove }}"
  loop_control:
    loop_var: user_management_user_to_remove
  when:
    - user_management_backup_removed_users | bool
    - user_management_users_to_remove | length > 0
  failed_when: false

- name: Remove unknown users
  ansible.builtin.user:
    name: "{{ user_management_user_to_remove }}"
    state: absent
    remove: "{{ user_management_remove_user_home }}"
  become: true
  loop: "{{ user_management_users_to_remove }}"
  loop_control:
    loop_var: user_management_user_to_remove
  when: user_management_users_to_remove | length > 0

- name: Log removed users
  ansible.builtin.debug:
    msg: "Removed users: {{ user_management_users_to_remove | join(', ') }}"
  when: user_management_users_to_remove | length > 0
